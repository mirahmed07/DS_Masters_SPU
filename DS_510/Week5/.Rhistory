p = .8
m = np
n = 100
p = .8
m = n*p
m
s = sqrt(n*p*(1-p))
s
1-pnorm(90, m,s)
dbinom(90,n,p)
pbinom(90,n,p)
2*dbinom(90,n,p)
dbinom(90,n,p)
1-pbinom(90,n,p)
pbinom(90,n,p)
1-pnorm(90, m,s, lower.tail = FALSE)
1-pnorm(90, m,s, lower.tail = TRUE)
pnorm(90, m,s, lower.tail = FALSE)
pbinom(90,n,p, lower.tail = FALSE)
2*pbinom(90,n,p, lower.tail = FALSE)
pbinom(90,n,p)
dbinom(90,n,p)
dbinom(90,n,p, lower.tail = FALSE)
dbinom(90,n,p)
pbinom(90,n,p, lower.tail = FALSE)
pbinom(90,n,p)
pbinom(90,n,p)
pbinom(90,100,.8, lower.tail = FALSE)
pbinom(90,100,.8)
dbinom(8,10,.6)
(.6^8) *(.4^2)
45 * (.6^8) *(.4^2)
factanal(10)/(factorial(8)*factorial(2))
factorial(10)/(factorial(8)*factorial(2))
p = 0.18
N = 300
SE = sqrt(p*(1-p)/N)
SE
p = 0.18
N = 300
SE = sqrt(p*(1-p)*N)
SE
pnorm(0.20,0.18,SE) - pnorm(0.15,0.18,SE)
p = 0.18
N = 300
SE = sqrt(p*(1-p)/N)
SE
pnorm(0.20,0.18,SE) - pnorm(0.15,0.18,SE)
1- pbinom(90,100,.8)
pbinom(100,n,p)
n = 100
p = .8
pbinom(100,n,p)
n = 100
p = .8
pbinom(10,n,p)
n = 100
p = .8
pbinom(80,n,p)
n = 100
p = .8
pbinom(90,n,p)
n = 100
p = .8
pbinom(110,n,p)
pbinom(4, size=12, prob=0.2)
n = 100
p = .8
pbinom(1,size = n, prob = p)
n = 100
p = .8
pbinom(90,size = n, prob = p)
dbinom(90:100,n,p)
sum(dbinom(90:100,n,p))
#load necessary libraries
library(dplyr)
library(tidyverse)
library(readxl)
library(ggplot2)
library(ggpubr)
library(data.table)
library(data.tree)
# Probability of A = P(A)
A = .5
# Probability of B = P(B)
B =  .3
# Probability of C = P(C)
C =  .2
# Probability of A with weapon = P(W|A)
A_W = .9
# Probability of B with weapon = P(W|B)
B_W= .5
# Probability of B with weapon = P(W|C)
C_W= .4
# Probability of A with no weapon = P(N|A)
A_N = 1-A_W
# Probability of B with no weapon = P(N|B)
B_N= 1-B_W
# Probability of B with no weapon = P(N|C)
C_N= 1-C_W
df = data.frame("pathString" = c("A", "B", "A/I", 'B/I', 'A/C', 'B/C'), "prob" = c(A,B,c,A_W,B_W,c_w,A_N,B_N,C_N))
# Probability of A = P(A)
A = .5
# Probability of B = P(B)
B =  .3
# Probability of C = P(C)
C =  .2
# Probability of A with weapon = P(W|A)
A_W = .9
# Probability of B with weapon = P(W|B)
B_W= .5
# Probability of B with weapon = P(W|C)
C_W= .4
# Probability of A with no weapon = P(N|A)
A_N = 1-A_W
# Probability of B with no weapon = P(N|B)
B_N= 1-B_W
# Probability of B with no weapon = P(N|C)
C_N= 1-C_W
df = data.frame("pathString" = c("A", "B", "A/I", 'B/I', 'A/C', 'B/C'), "prob" = c(A,B,C,A_W,B_W,c_w,A_N,B_N,C_N))
# Probability of A = P(A)
A = .5
# Probability of B = P(B)
B =  .3
# Probability of C = P(C)
C =  .2
# Probability of A with weapon = P(W|A)
A_W = .9
# Probability of B with weapon = P(W|B)
B_W= .5
# Probability of B with weapon = P(W|C)
C_W= .4
# Probability of A with no weapon = P(N|A)
A_N = 1-A_W
# Probability of B with no weapon = P(N|B)
B_N= 1-B_W
# Probability of B with no weapon = P(N|C)
C_N= 1-C_W
df = data.frame("pathString" = c("A", "B", "A/I", 'B/I', 'A/C', 'B/C'), "prob" = c(A,B,C,A_W,B_W,C_W,A_N,B_N,C_N))
# Probability of A = P(A)
A = .5
# Probability of B = P(B)
B =  .3
# Probability of C = P(C)
C =  .2
# Probability of A with weapon = P(W|A)
A_W = .9
# Probability of B with weapon = P(W|B)
B_W= .5
# Probability of B with weapon = P(W|C)
C_W= .4
# Probability of A with no weapon = P(N|A)
A_N = 1-A_W
# Probability of B with no weapon = P(N|B)
B_N= 1-B_W
# Probability of B with no weapon = P(N|C)
C_N= 1-C_W
df = data.frame("pathString" = c("A", "B", "C","A/W", 'B/W', 'C/W', 'A/N', 'B/N', 'C/N'), "prob" = c(A,B,C,A_W,B_W,C_W,A_N,B_N,C_N))
df
prob_data <- df %>%  mutate(tree_level = str_count(string = pathString, pattern = "/") + 1,
tree_group = str_replace(string = pathString, pattern = "/.*", replacement = ""),
node_type = "decision_node"
)
max_tree_level <- max(prob_data$tree_level, na.rm = T)
parent_lookup <- prob_data %>% distinct(pathString, prob) # get distinct probabilities to facilitate finding parent node probability
for (i in 1:(max_tree_level -  1)) { # loop through all tree layers to get all immidiate parent probabilities (to calculate cumulative prob)
names(parent_lookup)[1] <-paste0("parent",i)
names(parent_lookup)[2] <-paste0("parent_prob",i)
for (j in 1:i) {
if (j == 1)  prob_data[[paste0("parent",i)]] <- sub("/[^/]+$", "", prob_data$pathString)
else if (j  > 1) prob_data[[paste0("parent",i)]] <- sub("/[^/]+$", "", prob_data[[paste0("parent",i)]])
}
prob_data <- prob_data %>% left_join(parent_lookup, by = paste0("parent",i))
}
prob_data$overall_prob <- apply(prob_data %>% select(contains("prob"))  , 1, prod, na.rm = T)  # calculate cumulative probability
terminal_data <- prob_data %>%  filter(tree_level == max_tree_level) %>% # create new rows that will display terminal/final step calulcations on the tree
mutate(node_type = 'terminal',
pathString = paste0(pathString, "/overall"),
prob = NA,
tree_level = max_tree_level + 1)
start_node <- "Sample" # name the root node
prob_data = bind_rows(prob_data, terminal_data) %>%  # bind everything together
mutate(pathString = paste0(start_node,"/",pathString),
overall_prob = ifelse(node_type == 'terminal', overall_prob, NA),
prob_rank = rank(-overall_prob, ties.method = "min", na.last = "keep"))
prob_data = bind_rows(prob_data, data.frame(pathString = start_node, node_type = 'start', tree_level = 0)) %>% # add one new row to serve as the start node label
select(-contains("parent"))
make_my_tree <- function(mydf, display_level = NULL, show_rank = FALSE, direction = "LR") {
if (!is.null(display_level) ) {
mydf <- mydf %>% filter(tree_level <= display_level)
}
mytree <- as.Node(mydf)
GetEdgeLabel <- function(node) switch(node$node_type, node$prob)
GetNodeShape <- function(node) switch(node$node_type, start = "box", node_decision = "circle", terminal = "none")
GetNodeLabel <- function(node) switch(node$node_type,
terminal = ifelse(show_rank  == TRUE, paste0("Prob: ", node$overall_prob,"\nRank: ", node$prob_rank),
paste0("Prob: ", node$overall_prob)),
node$node_name)
SetEdgeStyle(mytree, fontname = 'helvetica', label = GetEdgeLabel)
SetNodeStyle(mytree, fontname = 'helvetica', label = GetNodeLabel, shape = GetNodeShape)
SetGraphStyle(mytree, rankdir = direction)
plot(mytree)
}
prob_data
make_my_tree(prob_data, show_rank = TRUE)
A*A_2 + B*B_W + C*C_W
A*A_W + B*B_W + C*C_W
(B*B_W)*(A*A_W + B*B_W + C*C_W)
(B*B_W)/(A*A_W + B*B_W + C*C_W)
# Mean
m = 185
# Standard deviation
s = 39
# Let
X = 150
# So,
z = (X-m)/s
pnorm(z)
# Let
X1 = 170
X2 = 200
# So,
z1 = (X1-m)/s
z2 = (X2-m)/s
pnorm(z2)- pnorm(z1)
# Let
X = 190
# So,
z = (X-m)/s
1- pnorm(z)
#Here
p = .2
q = 1-p
n = 10
#so mean
m = np
#Here
p = .2
q = 1-p
n = 10
#so mean
m = n*p
# And standard deviation
s = sqrt(n*p*q)
pnorm(z)
#Here
p = .2
q = 1-p
n = 100
#so mean
m = n*p
# And standard deviation
s = sqrt(n*p*q)
# So for P(X<30)
X = .3 - .05 # considering level of error
z = (X-m)/s
pnorm(z)
# So for P(X<30)
X = .3 - .05 # considering level of error
z = (X-m)/s
z
#Here
p = .2
q = 1-p
n = 100
#so mean
m = n*p
# And standard deviation
s = sqrt(n*p*q)
m
s
# So for P(X<30)
X = .3
z = (X-m)/s
z
pnorm(z)
# So for P(X<30)
X = 30
z = (X-m)/s
z
pnorm(z)
# So for P(X<30)
X = 33 # considering level of error
z = (X-m)/s
#Here
p = .2
q = 1-p
n = 10
#so mean
m = n*p
# And standard deviation
s = sqrt(n*p*q)
# So for P(X<30)
X = 30 # considering level of error
z = (X-m)/s
pnorm(z)
#Here
p = .2
q = 1-p
n = 10
#so mean
m = n*p
# And standard deviation
s = sqrt(n*p*q)
m
s
#Here
p = .2
q = 1-p
n = 10
#so mean
m = n*p
# And standard deviation
s = sqrt(n*p*q)
m
s
# So for P(X<30)
X = 30
z = (X-m)/s
z
pnorm(z)
#Here
p = .2
q = 1-p
n = 10
#so mean
m = n*p
# And standard deviation
s = sqrt(n*p*q)
m
s
# So for P(X<30)
X = 30
z = (X-m)/s
z
dbinom(X,n,p)
pbinom(X,n,p)
#Here
p = .2
q = 1-p
n = 100
#so mean
m = n*p
# And standard deviation
s = sqrt(n*p*q)
m
s
# So for P(X<30)
X = 30
z = (X-m)/s
z
pbinom(X,n,p)
pnorm(z)
unlink("C:/Users/mosab/DS_Masters/DS_520/Week5_mid/midterm_pt3_mir_cache", recursive = TRUE)
unlink("C:/Users/mosab/DS_Masters/DS_520/Week5_mid/midterm_pt3_mir_cache", recursive = TRUE)
unlink("C:/Users/mosab/DS_Masters/DS_520/Week5_mid/midterm_pt3_mir_cache", recursive = TRUE)
#Here
p = .2
q = 1-p
n = 10
#so mean
m = n*p
# And standard deviation
s = sqrt(n*p*q)
m
s
# So for P(X<30)
X = 3
z = (X-m)/s
z
# As m < 5, we can use binomial distribution
pbinom(X,n,p)
# So for P(X<30)
X = 30
z = (X-m)/s
z
x = c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131, 153, 177, 148, 189, 138, 146, 199, 167, 153, 130)
y = c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48, 65, 84, 59, 93, 49, 55, 79, 75, 66, 49)
df = data.frame("X" = x, "Y" = y)
df
summary(df)
sd(x)
sd(y)
print(paste("Sx =",sd(x)))
print(paste("Sy =",sd(y)))
df.X.mean()
mean(x)
df$X_mu = df$X - mean(x)
df
x = c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131, 153, 177, 148, 189, 138, 146, 199, 167, 153, 130)
y = c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48, 65, 84, 59, 93, 49, 55, 79, 75, 66, 49)
df = data.frame("X" = x, "Y" = y)
df
df$X_mu_sq = (df$X - mean(x))^2
df$Y_mu_sq = (df$Y - mean(y))^2
df
length(x)
# So standard deviation for X
S_x = sqrt(sum(df$X_mu_sq)/length(x))
S_x
# So standard deviation for X
S_x = sqrt(sum(df$X_mu_sq)/19)
S_x
# So standard deviation for X
S_x = sqrt(sum(df$X_mu_sq)/length(x)-1)
S_x
# So standard deviation for X
S_x = sqrt(sum(df$X_mu_sq)/(length(x)-1))
S_x
# So standard deviation for Y
S_y = sqrt(sum(df$Y_mu_sq)/(length(y)-1))
S_y
setwd("C:/Users/mosab/DS_Masters/DS_510/Week5")
x = c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131, 153, 177, 148, 189, 138, 146, 199, 167, 153, 130)
y = c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48, 65, 84, 59, 93, 49, 55, 79, 75, 66, 49)
df = data.frame("X" = x, "Y" = y)
df
summary(df)
df$X_xbar = df$X - mean(x)
df$Y_ybar = df$Y - mean(y)
df$X_xbar_times_Y-Ybar = df$X-xbar * df$Y_ybar
df$X_xbar = df$X - mean(x)
df$Y_ybar = df$Y - mean(y)
df$X_xbar_times_Y-Ybar = df$X_xbar * df$Y_ybar
x = c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131, 153, 177, 148, 189, 138, 146, 199, 167, 153, 130)
y = c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48, 65, 84, 59, 93, 49, 55, 79, 75, 66, 49)
df = data.frame("X" = x, "Y" = y)
df
df$X_xbar = df$X - mean(x)
df$Y_ybar = df$Y - mean(y)
df$X_xbar_times_Y_Ybar = df$X_xbar * df$Y_ybar
df$X_xbar_sq = (df$X - mean(x))^2
df$Y_ybar_sq = (df$Y - mean(y))^2
df
# So standard deviation for X
S_x = sqrt(sum(df$X_mu_sq)/(length(x)-1))
S_x
# So standard deviation for X
S_x = sqrt(sum(df$X_xbar_sq)/(length(x)-1))
S_x
# So standard deviation for Y
S_y = sqrt(sum(df$Y_ybar_sq)/(length(y)-1))
S_y
# So standard deviation for Y
S_y = sqrt(sum(df$Y_ybar_sq)/(length(y)-1))
S_y
print(paste("Sx =",sd(x)))
print(paste("Sy =",sd(y)))
# let slope  = r
r = sum(df$X_xbar_times_Y_Ybar)/sqrt(sum(df$X_xbar_sq)*sum(df$Y_ybar_sq))
r
fit<- lm(df$Y~df$X)
summary(fit)
cor(x, y)
cor(x, y)
#create plot with regression line, regression equation, and R-squared
ggplot(data=df, aes(x=X, y=Y)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=5, label.y=50) +
stat_cor(aes(label=..rr.label..), label.x=5, label.y=45) + labs( x="Petrol Pressure", y="Hydrocarbon escaping")
library(ggplot2)
library(ggpubr)
#create plot with regression line, regression equation, and R-squared
ggplot(data=df, aes(x=X, y=Y)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=5, label.y=50) +
stat_cor(aes(label=..rr.label..), label.x=5, label.y=45) + labs( x="Petrol Pressure", y="Hydrocarbon escaping")
#create plot with regression line, regression equation, and R-squared
ggplot(data=df, aes(x=X, y=Y)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=130, label.y=90) +
stat_cor(aes(label=..rr.label..), label.x=130, label.y=80) + labs( x="Petrol Pressure", y="Hydrocarbon escaping")
#create plot with regression line, regression equation, and R-squared
ggplot(data=df, aes(x=X, y=Y)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=130, label.y=90) +
stat_cor(aes(label=..rr.label..), label.x=130, label.y=80) + labs( x="X", y="Y")
b = r * (S_y/S_x)
b
fit<- lm(df$Y~df$X)
summary(fit)
#intercept <- fit$coefficients[1]
# slope
fit$coefficients[2]
a = mean(y)-b*mean(x)
a
# intercept
fit$coefficients[1]
#create plot with regression line, regression equation, and R-squared
ggplot(data=df, aes(x=X, y=Y)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=130, label.y=90) +
stat_cor(aes(label=..rr.label..), label.x=130, label.y=80) + labs( x="X", y="Y")
summary(fit)$r.squared
print(paste0("y =",a,"+",b,"x"))
print(paste0("y =",round(a,2),"+",round(b,2),"x"))
r^2
#load necessary libraries
library(dplyr)
library(tidyverse)
library(readxl)
library(ggplot2)
library(ggpubr)
library(data.table)
library(data.tree)
mean(c(572, 572, 573, 568, 569, 575, 565, 570))
sd(c(98, 96, 97, 100))
