# RDA
A50 = 114
# find p-value for two-tailed test
z50= round(qnorm(pz50, lower.tail = TRUE),2)
print(paste("z score for 50th percentile is", z50))
# percent of RDA
pz95 = 0.95
# find p-value for two-tailed test
z95= round(qnorm(pz95, lower.tail = TRUE),2)
print(paste("z score for 95th percentile is", z95))
mean = A50
print(paste("The value of mean is",mean))
A95 = 217
sd = (A95-mean)/z95
print(paste("The value of standard deviation is",sd))
unlink('C:/Users/mosab/DS_Masters/DS_520/Week1/Solution_week1_Mir_cache', recursive = TRUE)
unlink('C:/Users/mosab/DS_Masters/DS_520/Week1/Solution_week1_Mir_cache', recursive = TRUE)
floor(runif(10, min=10, max=40))
data
data = c(floor(runif(10, min=10, max=40)))
data
stem(data)
data = c(floor(runif(10, min=10, max=40)))
data
stem(data)
data = c(floor(runif(15, min=10, max=40)))
data
stem(data)
data2 = c(10, 11, 11, 12, 12, 14, 15, 18, 19, 20, 22, 24, 39, 40, 41, 44, 46, 50, 52, 52, 53, 55, 70)
stem(data2)
data2 = c(8, 10, 11, 11, 12, 12, 14, 15, 18, 19, 20, 22, 24, 39, 40, 41, 44, 46, 50, 52, 52, 53, 55, 70)
stem(data2)
data3 = c(sample(1:100, 15, replace=TRUE))
data3
stem(data3)
data2 = c(10, 11, 11, 12, 12, 14, 15, 18, 19, 20, 22, 24, 39, 40, 41, 44, 46, 50, 52, 52, 53, 55, 70)
stem(data2)
stem(data3, scale =2)
stem(data3)
stem(data3, scale =1)
stem(data3, scale =3)
knitr::opts_chunk$set(echo = TRUE)
##library(tidyverse)
library(readxl)
file_name = "ex02-152meis.xls"
data = read_xls(file_name)
data
summary(data)
fit<- lm(data$DwellPermit ~ data$Sales)
summary(fit)
# Scatterplot of DwellPermit & Sales
plot(data$DwellPermit, data$Sales, main="Scatterplot of DwellPermit & Sales",
xlab="DwellPermit", ylab="Sales", pch=19)
# Scatterplot of DwellPermit & Sales
plot(data$DwellPermit, data$Sales, main="Scatterplot of DwellPermit & Sales with least-squared regression line",
xlab="DwellPermit", ylab="Sales", pch=19)
# Add fit lines
abline(lm(DwellPermit~Sales, data = data), col="red") # regression line (y~x)
#load necessary libraries
library(ggplot2)
library(ggpubr)
gc()
gc()
knitr::opts_chunk$set(echo = TRUE)
##library(tidyverse)
library(readxl)
file_name = "ex02-152meis.xls"
data = read_xls(file_name)
data
summary(data)
fit<- lm(data$DwellPermit ~ data$Sales)
summary(fit)
# Scatterplot of DwellPermit & Sales
plot(data$DwellPermit, data$Sales, main="Scatterplot of DwellPermit & Sales",
xlab="DwellPermit", ylab="Sales", pch=19)
# Scatterplot of DwellPermit & Sales
plot(data$DwellPermit, data$Sales, main="Scatterplot of DwellPermit & Sales with least-squared regression line",
xlab="DwellPermit", ylab="Sales", pch=19)
# Add fit lines
abline(lm(DwellPermit~Sales, data = data), col="red") # regression line (y~x)
#load necessary libraries
library(ggplot2)
library(ggpubr)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=DwellPermit, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=30, label.y=310) +
stat_cor(aes(label=..rr.label..), label.x=30, label.y=290)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=DwellPermit, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=30, label.y=160) +
stat_cor(aes(label=..rr.label..), label.x=30, label.y=140)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=DwellPermit, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=30, label.y=170) +
stat_cor(aes(label=..rr.label..), label.x=30, label.y=160)
install.packages("rmarkdown")
fit<- lm(data$Sales~ data$DwellPermit)
summary(fit)
# Scatterplot of DwellPermit & Sales
plot(data$DwellPermit, data$Sales, main="Scatterplot of DwellPermit & Sales with least-squared regression line",
xlab="DwellPermit", ylab="Sales", pch=19)
# Add fit lines
abline(lm(Sales~DwellPermit, data = data), col="red") # regression line (y~x)
lm(data$Sales~ data$DwellPermit)
lm(data$Sales~ data$DwellPermit)[0]
lm(data$Sales~ data$DwellPermit)[1]
lm(data$Sales~ data$DwellPermit)[1][0]
lm(data$Sales~ data$DwellPermit)[1][1]
fit$coefficients
fit$coefficients[0]
fit$coefficients[1]
fit$coefficients[2]
b = fit$coefficients[1]
b
b = fit$coefficients[1]
a = fit$coefficients[2]
x = 160
sales = a*x + b
sales
x = 160
sales = a*x + b
a
a
a[0]
a[1]
a[1][1]
a[1][0]
fit$coefficients[-1]
fit$coefficients[-2]
fit$coefficients[-2][1]
fit$coefficients[1]
fit$coefficients[1][3]
fit$coefficients[1][2]
fit$coefficients[1][1]
fit$coefficients[1][-1]
fit$coefficients[1][0]
unname(fit$coefficients[1])
b = unname(fit$coefficients[1])
a = unname(fit$coefficients[2])
x = 160
sales = a*x + b
sales
x = 160
sales = a*x + b
print(paste("Predicted value of sales for a country that has an index of 160 for dwelling permits is", sales))
# Scatterplot of DwellPermit & Sales
plot(data$DwellPermit, data$Sales, main="Scatterplot of DwellPermit & Sales",
xlab="DwellPermit", ylab="Sales", pch=19)
# Scatterplot of DwellPermit & Sales
plot(data$DwellPermit, data$Sales, main="Scatterplot of DwellPermit & Sales with least-squared regression line",
xlab="DwellPermit", ylab="Sales", pch=19)
# Add fit lines
abline(lm(Sales~DwellPermit, data = data), col="red") # regression line (y~x)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=DwellPermit, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=30, label.y=170) +
stat_cor(aes(label=..rr.label..), label.x=30, label.y=160)
#List of residuals
resid(fit)
#List of residual for Netherlands (15th on the list)
resid(fit) [15]
#List of residual for Netherlands (15th on the list)
resid(fit)
which(data$Country == "Nethrlands")
which(data$Country == "Netherlands")
which(data$Country == "Netherlands" & data$DwellPermit==160)
id = which(data$Country == "Netherlands" & data$DwellPermit==160)
#List of residual for Netherlands (15th on the list)
resid(fit)[id]
#List of residual for Netherlands (15th on the list)
print(paste("Residual for Netherlands is",resid(fit)[id]))
data$DwellPermit- data$DwellPermit.mean()
data$DwellPermit- mean(data$DwellPermit)
data$xbar_diff = data$DwellPermit- mean(data$DwellPermit)
data$xbar_diff = data$DwellPermit- mean(data$DwellPermit)
data$ybar_diff = data$Sales- mean(data$Sales)
data$xbar_diffs = (data$DwellPermit- mean(data$DwellPermit))^2
data$ybar_diffs = (data$Sales- mean(data$Sales))^2
data
(sum(data$xbar_diff)*sum(data$ybar_diff))/(sum(data$xbar_diffs)*sum(data$ybar_diffs))
(sum(data$xbar_diff)*sum(data$ybar_diff))/sqrt((sum(data$xbar_diffs)*sum(data$ybar_diffs)))
data$xbar_diff = data$DwellPermit- mean(data$DwellPermit)
data$ybar_diff = data$Sales- mean(data$Sales)
data$xbar_diffs = (data$DwellPermit- mean(data$DwellPermit))^2
data$ybar_diffs = (data$Sales- mean(data$Sales))^2
data$xy = data$xbar_diff * data$ybar_diff
data$xy2 = data$xbar_diffs * data$ybar_diffs
data
sum(xy)/sqrt(sum(xy2))
sum(data$xy)/sqrt(sum(data$xy2))
sum(data$xy)
sum(data$xy2)
rsq <- function (x, y) cor(data$DwellPermit, data$Sales) ^ 2
rsq
rsq <-  cor(data$DwellPermit, data$Sales) ^ 2
rsq
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=DwellPermit, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=30, label.y=170) +
stat_cor(aes(label=..rr.label...), label.x=30, label.y=160)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=DwellPermit, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=30, label.y=170) +
stat_cor(aes(label=..rr.label.), label.x=30, label.y=160)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=DwellPermit, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=30, label.y=170) +
stat_cor(aes(label=.rr.label..), label.x=30, label.y=160)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=DwellPermit, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=30, label.y=170) +
stat_cor(aes(label=..rr.label..), label.x=30, label.y=160)
file_name = "ex02-152meis.xls"
data = read_xls(file_name)
data$xbar_diff = data$DwellPermit- mean(data$DwellPermit)
data$ybar_diff = data$Sales- mean(data$Sales)
data$xbar_diffs = (data$DwellPermit- mean(data$DwellPermit))^2
data$ybar_diffs = (data$Sales- mean(data$Sales))^2
data$xy = data$xbar_diff * data$ybar_diff
data$xy2 = data$xbar_diffs * data$ybar_diffs
data
sum(data$ybar_diffs)/sqrt(sum(data$))
sum(data$ybar_diffs)
sum(data$ybar_diffs) * sum(data$xbar_diffs)
(sum(data$xy))/sqrt(sum(data$ybar_diffs) * sum(data$xbar_diffs))
(sum(data$xy))/sqrt(sum(data$ybar_diffs) * sum(data$xbar_diffs))^2
r = (sum(data$xy))/sqrt(sum(data$ybar_diffs) * sum(data$xbar_diffs))
r^2
r = (sum(data$xy))/sqrt(sum(data$ybar_diffs) * sum(data$xbar_diffs))
r^2
sum(data$xy2)
file_name = "ex02-152meis.xls"
data = read_xls(file_name)
data$xbar_diff = data$DwellPermit- mean(data$DwellPermit)
data$ybar_diff = data$Sales- mean(data$Sales)
data$xbar_diffs = (data$DwellPermit- mean(data$DwellPermit))^2
data$ybar_diffs = (data$Sales- mean(data$Sales))^2
data$xy = data$xbar_diff * data$ybar_diff
data
data = data[c(1:4)]
data
data$xbar_diff = data$DwellPermit- mean(data$DwellPermit)
data$ybar_diff = data$Sales- mean(data$Sales)
data$xbar_diffs = (data$DwellPermit- mean(data$DwellPermit))^2
data$ybar_diffs = (data$Sales- mean(data$Sales))^2
data$xy = data$xbar_diff * data$ybar_diff
data
file_name = "ex02-152meis.xls"
data = read_xls(file_name)
data
summary(data)
fit<- lm(data$Production~ data$DwellPermit)
summary(fit)
b = unname(fit$coefficients[1])
a = unname(fit$coefficients[2])
# Scatterplot of DwellPermit & Sales
plot(data$DwellPermit, data$Production, main="Scatterplot of DwellPermit & Production",
xlab="DwellPermit", ylab="Production", pch=19)
# Scatterplot of DwellPermit & Production
plot(data$DwellPermit, data$Production, main="Scatterplot of DwellPermit & Production with least-squared regression line",
xlab="DwellPermit", ylab="Production", pch=19)
# Add fit lines
abline(lm(Production~DwellPermit, data = data), col="red") # regression line (y~x)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=DwellPermit, y=Production)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=30, label.y=170) +
stat_cor(aes(label=..rr.label..), label.x=30, label.y=160)
x = 160
sales = a*x + b
print(paste("Predicted value of sales for a country that has an index of 160 for dwelling permits is", sales))
x = 160
sales = a*x + b
print(paste("Predicted value of Production for a country that has an index of 160 for dwelling permits is", sales))
id = which(data$Country == "Netherlands" & data$DwellPermit==160)
#List of residual for Netherlands (15th on the list)
print(paste("Residual for Netherlands is",resid(fit)[id]))
rsq <-  cor(data$DwellPermit, data$Production) ^ 2
rsq
cor(data$DwellPermit, data$Production)
cor(data$DwellPermit, data$Sales)
file_name = "ex02-152meis.xls"
data = read_xls(file_name)
data
summary(data)
fit<- lm(data$Production~ data$Sales)
summary(fit)
fit<- lm(data$Sales~ data$Production)
summary(fit)
b = unname(fit$coefficients[1])
a = unname(fit$coefficients[2])
# Scatterplot of Sales & Production
plot(data$Production, data$Sales, main="Scatterplot of Sales & Production",
xlab="Production", ylab="Sales", pch=19)
# Scatterplot of DwellPermit & Production
plot(data$Production, data$sales, main="Scatterplot of sales & Production with least-squared regression line",
xlab="Production", ylab="sales", pch=19)
# Add fit lines
abline(lm(sales~Production, data = data), col="red") # regression line (y~x)
# Scatterplot of DwellPermit & Production
plot(data$Production, data$sales, main="Scatterplot of sales & Production with least-squared regression line",
xlab="Production", ylab="sales", pch=19)
# Add fit lines
abline(lm(Sales~Production, data = data), col="red") # regression line (y~x)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=Production, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=30, label.y=170) +
stat_cor(aes(label=..rr.label..), label.x=30, label.y=160)
# Scatterplot of DwellPermit & Production
plot(data$Production, data$sales, main="Scatterplot of sales & Production with least-squared regression line",
xlab="Production", ylab="sales", pch=19)
# Add fit lines
abline(lm(Sales~Production, data = data), col="red") # regression line (y~x)
# Scatterplot of DwellPermit & Production
plot(data$Production, data$sales, main="Scatterplot of sales & Production with least-squared regression line",
xlab="Production", ylab="Sales", pch=19)
# Add fit lines
abline(lm(Sales~Production, data = data), col="red") # regression line (y~x)
# Scatterplot of DwellPermit & Production
plot(data$Production, data$Sales, main="Scatterplot of sales & Production with least-squared regression line",
xlab="Production", ylab="Sales", pch=19)
# Add fit lines
abline(lm(Sales~Production, data = data), col="red") # regression line (y~x)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=Production, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=80, label.y=170) +
stat_cor(aes(label=..rr.label..), label.x=80, label.y=160)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=Production, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=90, label.y=170) +
stat_cor(aes(label=..rr.label..), label.x=90, label.y=160)
b = unname(fit$coefficients[1])
a = unname(fit$coefficients[2])
x = 125
sales = a*x + b
print(paste("Predicted value of Production for a country that has an index of 125 for Production is", sales))
id = which(data$Country == "Finland" & data$Production ==125)
#List of residual for Netherlands (15th on the list)
print(paste("Residual for Finland is",resid(fit)[id]))
id
resid(fit)
rsq <-  cor(data$Production, data$Sales) ^ 2
rsq
cor(data$Production, data$Sales)
gc()
gc()
gc()
install.packages(c("cpp11", "data.table", "digest", "hms", "influenceR", "lattice", "lifecycle", "mgcv", "pillar", "readr", "tidyr"))
mean(data)
data = (572, 572, 573, 568, 569, 575, 565, 570)
data = array(572, 572, 573, 568, 569, 575, 565, 570)
data = c(572, 572, 573, 568, 569, 575, 565, 570)
mean(data)
40/160
data = c(121,   173,   157,   165,   170,   161,   142,   171,   184,   100,   145,   196)
median(data)
sort(data, decreasing = FALSE)
sizeof(data)
length(data)
describe(data)
arr = c(121,   173,   157,   165,   170,   161,   142,   171,   184,   100,   145,   196)
length(arr)
summary(arr)
boxplot(arr,
ylab = "weight"
)
boxplot.stats(arr)$out
(142+145)/2
(171+173)/2
172 – 143.5
172–143.5
172-143.5
143.5-1.5*28.5
172 + 1.5*28.5
length(boxplot.stats(arr)$out)
(150-185)/39
round((150-185)/39,2)
(150-185)/39
pnorm((150-185)/39)
pnorm(.8974359 )
pnorm(-.8974359 )
unlink("C:/Users/mosab/DS_Masters/DS_520/Week3/Week_3_Assignment_Mir_cache", recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/mosab/DS_Masters/DS_520/Week3")
knitr::opts_chunk$set(echo = TRUE)
#load necessary libraries
library(dplyr)
library(tidyverse)
library(readxl)
library(ggplot2)
library(ggpubr)
library(data.table)
library(data.tree)
# Probability of A = P(A)
A = .52
# Probability of B = P(B)
B =  .48
# Probability of A with inadequate calcium intake = P(I|A)
A_I = .18
# Probability of B with inadequate calcium intake = P(I|B)
B_I= .57
# Probability of A with adequate calcium intake = P(C|A)
A_C = 1-A_I
# Probability of B with adequate calcium intake = P(C|B)
B_C= 1-B_I
df = data.frame("pathString" = c("A", "B", "A/I", 'B/I', 'A/C', 'B/C'), "prob" = c(A,B,A_I,B_I,A_C,B_C))
df
prob_data <- df %>%  mutate(tree_level = str_count(string = pathString, pattern = "/") + 1,
tree_group = str_replace(string = pathString, pattern = "/.*", replacement = ""),
node_type = "decision_node"
)
max_tree_level <- max(prob_data$tree_level, na.rm = T)
parent_lookup <- prob_data %>% distinct(pathString, prob) # get distinct probabilities to facilitate finding parent node probability
for (i in 1:(max_tree_level -  1)) { # loop through all tree layers to get all immidiate parent probabilities (to calculate cumulative prob)
names(parent_lookup)[1] <-paste0("parent",i)
names(parent_lookup)[2] <-paste0("parent_prob",i)
for (j in 1:i) {
if (j == 1)  prob_data[[paste0("parent",i)]] <- sub("/[^/]+$", "", prob_data$pathString)
else if (j  > 1) prob_data[[paste0("parent",i)]] <- sub("/[^/]+$", "", prob_data[[paste0("parent",i)]])
}
prob_data <- prob_data %>% left_join(parent_lookup, by = paste0("parent",i))
}
prob_data$overall_prob <- apply(prob_data %>% select(contains("prob"))  , 1, prod, na.rm = T)  # calculate cumulative probability
terminal_data <- prob_data %>%  filter(tree_level == max_tree_level) %>% # create new rows that will display terminal/final step calulcations on the tree
mutate(node_type = 'terminal',
pathString = paste0(pathString, "/overall"),
prob = NA,
tree_level = max_tree_level + 1)
start_node <- "Sample" # name the root node
prob_data = bind_rows(prob_data, terminal_data) %>%  # bind everything together
mutate(pathString = paste0(start_node,"/",pathString),
overall_prob = ifelse(node_type == 'terminal', overall_prob, NA),
prob_rank = rank(-overall_prob, ties.method = "min", na.last = "keep"))
prob_data = bind_rows(prob_data, data.frame(pathString = start_node, node_type = 'start', tree_level = 0)) %>% # add one new row to serve as the start node label
select(-contains("parent"))
make_my_tree <- function(mydf, display_level = NULL, show_rank = FALSE, direction = "LR") {
if (!is.null(display_level) ) {
mydf <- mydf %>% filter(tree_level <= display_level)
}
mytree <- as.Node(mydf)
GetEdgeLabel <- function(node) switch(node$node_type, node$prob)
GetNodeShape <- function(node) switch(node$node_type, start = "box", node_decision = "circle", terminal = "none")
GetNodeLabel <- function(node) switch(node$node_type,
terminal = ifelse(show_rank  == TRUE, paste0("Prob: ", node$overall_prob,"\nRank: ", node$prob_rank),
paste0("Prob: ", node$overall_prob)),
node$node_name)
SetEdgeStyle(mytree, fontname = 'helvetica', label = GetEdgeLabel)
SetNodeStyle(mytree, fontname = 'helvetica', label = GetNodeLabel, shape = GetNodeShape)
SetGraphStyle(mytree, rankdir = direction)
plot(mytree)
}
prob_data
make_my_tree(prob_data, show_rank = TRUE)
I = (A*A_I) + (B*B_I)
print(paste("P(I) =",I))
BI = B * B_I/I
print(paste("P(B|I) =",BI))
# probability of L = P(L)
p_l = .48
# probability of M = P(M)
p_m = .5
# probability of F = P(F)
p_f = 1- p_m
# probability of P(L∩M)
p_lm = .25
# probability of P(L∩F)
p_lf = p_l-p_lm
print(paste("The probability that a randomly selected student who is either male or would admit to lying to a teacher, during the past year would be", p_l+p_m-p_lm))
print(paste("The probability that a selected student from the lying subpopulation is female, during the past year would be", round(p_lf/p_l,4)))
unlink("Week_3_Assignment_Mir_cache", recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE, always_allow_html = TRUE)
install.packages(c("knitr", "mime", "tinytex"))
install.packages(c("knitr", "mime", "tinytex"))
install.packages(c("knitr", "mime", "tinytex"))
install.packages(c("knitr", "mime", "tinytex"))
install.packages(c("knitr", "mime", "tinytex"))
install.packages(c("knitr", "mime", "tinytex"))
install.packages(c("knitr", "mime", "tinytex"))
install.packages(c("knitr", "mime", "tinytex"))
unlink("Week_3_Assignment_Mir_cache", recursive = TRUE)
#load necessary libraries
library(dplyr)
library(tidyverse)
library(readxl)
library(ggplot2)
library(ggpubr)
library(data.table)
library(data.tree)
getcwd()
