B_W= .5
# Probability of B with weapon = P(W|C)
C_W= .4
# Probability of A with no weapon = P(N|A)
A_N = 1-A_W
# Probability of B with no weapon = P(N|B)
B_N= 1-B_W
# Probability of B with no weapon = P(N|C)
C_N= 1-C_W
df = data.frame("pathString" = c("A", "B", "A/I", 'B/I', 'A/C', 'B/C'), "prob" = c(A,B,C,A_W,B_W,c_w,A_N,B_N,C_N))
# Probability of A = P(A)
A = .5
# Probability of B = P(B)
B =  .3
# Probability of C = P(C)
C =  .2
# Probability of A with weapon = P(W|A)
A_W = .9
# Probability of B with weapon = P(W|B)
B_W= .5
# Probability of B with weapon = P(W|C)
C_W= .4
# Probability of A with no weapon = P(N|A)
A_N = 1-A_W
# Probability of B with no weapon = P(N|B)
B_N= 1-B_W
# Probability of B with no weapon = P(N|C)
C_N= 1-C_W
df = data.frame("pathString" = c("A", "B", "A/I", 'B/I', 'A/C', 'B/C'), "prob" = c(A,B,C,A_W,B_W,C_W,A_N,B_N,C_N))
# Probability of A = P(A)
A = .5
# Probability of B = P(B)
B =  .3
# Probability of C = P(C)
C =  .2
# Probability of A with weapon = P(W|A)
A_W = .9
# Probability of B with weapon = P(W|B)
B_W= .5
# Probability of B with weapon = P(W|C)
C_W= .4
# Probability of A with no weapon = P(N|A)
A_N = 1-A_W
# Probability of B with no weapon = P(N|B)
B_N= 1-B_W
# Probability of B with no weapon = P(N|C)
C_N= 1-C_W
df = data.frame("pathString" = c("A", "B", "C","A/W", 'B/W', 'C/W', 'A/N', 'B/N', 'C/N'), "prob" = c(A,B,C,A_W,B_W,C_W,A_N,B_N,C_N))
df
prob_data <- df %>%  mutate(tree_level = str_count(string = pathString, pattern = "/") + 1,
tree_group = str_replace(string = pathString, pattern = "/.*", replacement = ""),
node_type = "decision_node"
)
max_tree_level <- max(prob_data$tree_level, na.rm = T)
parent_lookup <- prob_data %>% distinct(pathString, prob) # get distinct probabilities to facilitate finding parent node probability
for (i in 1:(max_tree_level -  1)) { # loop through all tree layers to get all immidiate parent probabilities (to calculate cumulative prob)
names(parent_lookup)[1] <-paste0("parent",i)
names(parent_lookup)[2] <-paste0("parent_prob",i)
for (j in 1:i) {
if (j == 1)  prob_data[[paste0("parent",i)]] <- sub("/[^/]+$", "", prob_data$pathString)
else if (j  > 1) prob_data[[paste0("parent",i)]] <- sub("/[^/]+$", "", prob_data[[paste0("parent",i)]])
}
prob_data <- prob_data %>% left_join(parent_lookup, by = paste0("parent",i))
}
prob_data$overall_prob <- apply(prob_data %>% select(contains("prob"))  , 1, prod, na.rm = T)  # calculate cumulative probability
terminal_data <- prob_data %>%  filter(tree_level == max_tree_level) %>% # create new rows that will display terminal/final step calulcations on the tree
mutate(node_type = 'terminal',
pathString = paste0(pathString, "/overall"),
prob = NA,
tree_level = max_tree_level + 1)
start_node <- "Sample" # name the root node
prob_data = bind_rows(prob_data, terminal_data) %>%  # bind everything together
mutate(pathString = paste0(start_node,"/",pathString),
overall_prob = ifelse(node_type == 'terminal', overall_prob, NA),
prob_rank = rank(-overall_prob, ties.method = "min", na.last = "keep"))
prob_data = bind_rows(prob_data, data.frame(pathString = start_node, node_type = 'start', tree_level = 0)) %>% # add one new row to serve as the start node label
select(-contains("parent"))
make_my_tree <- function(mydf, display_level = NULL, show_rank = FALSE, direction = "LR") {
if (!is.null(display_level) ) {
mydf <- mydf %>% filter(tree_level <= display_level)
}
mytree <- as.Node(mydf)
GetEdgeLabel <- function(node) switch(node$node_type, node$prob)
GetNodeShape <- function(node) switch(node$node_type, start = "box", node_decision = "circle", terminal = "none")
GetNodeLabel <- function(node) switch(node$node_type,
terminal = ifelse(show_rank  == TRUE, paste0("Prob: ", node$overall_prob,"\nRank: ", node$prob_rank),
paste0("Prob: ", node$overall_prob)),
node$node_name)
SetEdgeStyle(mytree, fontname = 'helvetica', label = GetEdgeLabel)
SetNodeStyle(mytree, fontname = 'helvetica', label = GetNodeLabel, shape = GetNodeShape)
SetGraphStyle(mytree, rankdir = direction)
plot(mytree)
}
prob_data
make_my_tree(prob_data, show_rank = TRUE)
A*A_2 + B*B_W + C*C_W
A*A_W + B*B_W + C*C_W
(B*B_W)*(A*A_W + B*B_W + C*C_W)
(B*B_W)/(A*A_W + B*B_W + C*C_W)
# Mean
m = 185
# Standard deviation
s = 39
# Let
X = 150
# So,
z = (X-m)/s
pnorm(z)
# Let
X1 = 170
X2 = 200
# So,
z1 = (X1-m)/s
z2 = (X2-m)/s
pnorm(z2)- pnorm(z1)
# Let
X = 190
# So,
z = (X-m)/s
1- pnorm(z)
#Here
p = .2
q = 1-p
n = 10
#so mean
m = np
#Here
p = .2
q = 1-p
n = 10
#so mean
m = n*p
# And standard deviation
s = sqrt(n*p*q)
pnorm(z)
#Here
p = .2
q = 1-p
n = 100
#so mean
m = n*p
# And standard deviation
s = sqrt(n*p*q)
# So for P(X<30)
X = .3 - .05 # considering level of error
z = (X-m)/s
pnorm(z)
# So for P(X<30)
X = .3 - .05 # considering level of error
z = (X-m)/s
z
#Here
p = .2
q = 1-p
n = 100
#so mean
m = n*p
# And standard deviation
s = sqrt(n*p*q)
m
s
# So for P(X<30)
X = .3
z = (X-m)/s
z
pnorm(z)
# So for P(X<30)
X = 30
z = (X-m)/s
z
pnorm(z)
# So for P(X<30)
X = 33 # considering level of error
z = (X-m)/s
#Here
p = .2
q = 1-p
n = 10
#so mean
m = n*p
# And standard deviation
s = sqrt(n*p*q)
# So for P(X<30)
X = 30 # considering level of error
z = (X-m)/s
pnorm(z)
#Here
p = .2
q = 1-p
n = 10
#so mean
m = n*p
# And standard deviation
s = sqrt(n*p*q)
m
s
#Here
p = .2
q = 1-p
n = 10
#so mean
m = n*p
# And standard deviation
s = sqrt(n*p*q)
m
s
# So for P(X<30)
X = 30
z = (X-m)/s
z
pnorm(z)
#Here
p = .2
q = 1-p
n = 10
#so mean
m = n*p
# And standard deviation
s = sqrt(n*p*q)
m
s
# So for P(X<30)
X = 30
z = (X-m)/s
z
dbinom(X,n,p)
pbinom(X,n,p)
#Here
p = .2
q = 1-p
n = 100
#so mean
m = n*p
# And standard deviation
s = sqrt(n*p*q)
m
s
# So for P(X<30)
X = 30
z = (X-m)/s
z
pbinom(X,n,p)
pnorm(z)
unlink("C:/Users/mosab/DS_Masters/DS_520/Week5_mid/midterm_pt3_mir_cache", recursive = TRUE)
unlink("C:/Users/mosab/DS_Masters/DS_520/Week5_mid/midterm_pt3_mir_cache", recursive = TRUE)
unlink("C:/Users/mosab/DS_Masters/DS_520/Week5_mid/midterm_pt3_mir_cache", recursive = TRUE)
#Here
p = .2
q = 1-p
n = 10
#so mean
m = n*p
# And standard deviation
s = sqrt(n*p*q)
m
s
# So for P(X<30)
X = 3
z = (X-m)/s
z
# As m < 5, we can use binomial distribution
pbinom(X,n,p)
# So for P(X<30)
X = 30
z = (X-m)/s
z
pt(.63,99)
prop.test(x=64, n=100, p=0.50, alternative="two.sided")
prop.test(x=64, n=100, p=0.50, alternative="greate")
p = .64
n = 100
p0 = .5
z = (p-p0)/sqrt(p0*(1-p0)/n)
z
pnorm(z)
prop.test(x=64, n=100, p=0.50, alternative="greater", correct=TRUE)
prop.test(x=.64, n=100, p=0.50, alternative="greater", correct=TRUE)
prop.test(x=64, n=100, p=0.50, alternative="greater", correct=TRUE)
pnorm(z, lower.tail=FALSE)
p1 = .5
p2 = .2
n1 = 20
n2 = 30
p = (p1*n1+p2*n2)/(n1+n2)
p
p1 = .5
p2 = .2
n1 = 20
n2 = 30
p = (p1*n1+p2*n2)/(n1+n2)
p
p1*n1+p2*n2
n1+n2
p1 = .5
p2 = .2
n1 = 20
n2 = 30
p = (p1*n1+p2*n2)/(n1+n2)
p
(p1*n1)+(p2*n2)
n1+n2
p1*n1
p2*n2
qnorm(.05)
qnorm(.95)
n = 200
p = 50/n
qnorm(.95)+ sqrt(p*(1-p)/n)
n = 200
p = 50/n
qnorm(.95)*sqrt(p*(1-p)/n)
sqrt(p*(1-p)/n)
qnorm(.95)
qnorm(.975)
qnorm(.975)*sqrt(p*(1-p)/n)
p
qnorm(.975)*sqrt(p*(1-p)/n)
prop.test(x=64, n=100, p=0.50, alternative="greater", correct=F)
x = 5
n = 25
p = x/n
sqrt(p*(1-p)/n)
p_test = prop.test(x = c(15,12), n = c(100,100), alternative = 'two.sided', conf.level = .95, correct = F)
p_test
prop.test(x=29, n=81, alternative="greater", correct=F)
prop.test(x=29, n=81, alternative="greater", correct=F, conf.level = .90)
qnorm(.90)
qnorm(.95)
p = 29/81
n = 87
p+qnorm(.95)*sqrt(p*(1-p)/n)
p-qnorm(.95)*sqrt(p*(1-p)/n)
p = 29/81
n = 87
p+round(qnorm(.95),3)*sqrt(p*(1-p)/n)
p-qnorm(.95)*sqrt(p*(1-p)/n)
p = round(29/81,2)
n = 87
p+round(qnorm(.95),3)*sqrt(p*(1-p)/n)
p-qnorm(.95)*sqrt(p*(1-p)/n)
p = round(29/81,2)
n = 87
p+qnorm(.95)*sqrt(p*(1-p)/n)
p-qnorm(.95)*sqrt(p*(1-p)/n)
p
p = round(29/81,2)
n = 81
p+qnorm(.95)*sqrt(p*(1-p)/n)
p-qnorm(.95)*sqrt(p*(1-p)/n)
p = 29/81
n = 81
p+qnorm(.95)*sqrt(p*(1-p)/n)
p-qnorm(.95)*sqrt(p*(1-p)/n)
p = round(29/81,2)
n = 81
p+qnorm(.95)*sqrt(p*(1-p)/n)
p-qnorm(.95)*sqrt(p*(1-p)/n)
p = round(29/81,2)
p = 29/81
n = 81
p+qnorm(.95)*sqrt(p*(1-p)/n)
p-qnorm(.95)*sqrt(p*(1-p)/n)
p = round(29/81,2)
# p = 29/81
n = 81
p+qnorm(.95)*sqrt(p*(1-p)/n)
p-qnorm(.95)*sqrt(p*(1-p)/n)
df = data.frame(pep = c(18,14,3), veg = c(11,12,9), che = c(6,7,20))
df
chisq.test(df, correct = F)
20*28/112
n = 15
p = 3/15
sqrt(p*(1-p)/n)
5/19
7/19
5/19
n = 15
p = 3+2/15+4
sqrt(p*(1-p)/n)
n = 15
p = (3+2)/(n+4)
sqrt(p*(1-p)/n)
n = 15
p = (3+2)/(n+4)
sqrt(p*(1-p)/(n+4))
xsq= chisq.test(df, correct = F)
plot(xsq)
p = round(1/277,2)
n = 277
p+qnorm(.975)*sqrt(p*(1-p)/n)
p-qnorm(.975)*sqrt(p*(1-p)/n)
p = 1/277
n = 277
p+qnorm(.975)*sqrt(p*(1-p)/n)
p-qnorm(.975)*sqrt(p*(1-p)/n)
p = 1/277
n = 277
p+qnorm(.95)*sqrt(p*(1-p)/n)
p+qnorm(.975)*sqrt(p*(1-p)/n)
p-qnorm(.975)*sqrt(p*(1-p)/n)
p = 1/277
n = 277
p+qnorm(.95)*sqrt(p*(1-p)/n)
p_qnorm(.95)*sqrt(p*(1-p)/n)
p = 1/277
n = 277
p+qnorm(.95)*sqrt(p*(1-p)/n)
p-qnorm(.95)*sqrt(p*(1-p)/n)
p+qnorm(.975)*sqrt(p*(1-p)/n)
p-qnorm(.975)*sqrt(p*(1-p)/n)
prop.test(1/277,correct = F)
prop.test(1,277,correct = F)
prop.test(1,277, alternative = "greater",correct = F)
prop.test(1,277, alternative = "less",correct = F)
prop.test(1,277, alternative = "two.sided",correct = F)
prop.test(1,277,n = .019, alternative = "two.sided",correct = F)
prop.test(x=1,n=277,p = .019, alternative = "two.sided",correct = F)
prop.test(x=1,n=277,p = .019, alternative = "greater",correct = F)
prop.test(x=1,n=277,p = .019, alternative = "less",correct = F)
prop.test(x=1,n=277,p = .019, alternative = "less", conf.level = .95,correct = F)
prop.test(x=1,n=277,p = .019, alternative = "less", conf.level = .95, correct = T)
prop.test(x=1,n=277,p = .019, alternative = "less", conf.level = .95, correct = F)
p - qnorm(.95) * .004
p - qnorm(.95) * .004
p + qnorm(.95) * .004
se = sqrt(p * (1-p)/n)
se
p - qnorm(.95) * se
p + qnorm(.95) * se
p
se = sqrt(p * (1-p)/n)
se
p - qnorm(.95) * se
p + qnorm(.95) * se
prop.test(x=1,n=277,p = .019, alternative = "less", conf.level = .975, correct = F)
prop.test(x=1,n=277,p = .019, alternative = "less", conf.level = .95, correct = F)
p = 1
n = 277
p0 = .019
z = (p-p0)/sqrt(p0*(1-p0)/n)
z
pnorm(z, lower.tail=FALSE)
qnorm(.98)
qnorm(.99)
qnorm(.95)
qnorm(.95, lower.tail = T)
qnorm(.95, lower.tail = F)
qnorm(.95, lower.tail = T)
qnorm(.5, lower.tail = T)
qnorm(.05, lower.tail = T)
qnorm(.05, lower.tail = F)
# 95%
qnorm(.025, lower.tail = F)
# 95% 2 tailed
qnorm(.025, lower.tail = F)
# 98% 2 tailed
qnorm(.01, lower.tail = F)
# 98% 2 tailed
qnorm(.01, lower.tail = T)
# 98% 2 tailed
qnorm(.01, lower.tail = F)
```{r}
# 95% 2 tailed
qnorm(.975, lower.tail = F)
# 95% 2 tailed
qnorm(.975, lower.tail = T)
230 + 1.96*10/sqrt(10)
230 + 1.96*10/sqrt(100)
230 - 1.96*10/sqrt(100)
View(data)
setwd("C:/Users/mosab/DS_Masters/DS_520/Week9")
t = qt(.95, 48, lower.tail=TRUE)
t
t = qt(.975, 48, lower.tail=TRUE)
t
t*.0025
176777.1/178714.2
t*.015
t = qt(.995, 48, lower.tail=TRUE)
t
t*.015
x = c(29.84,28.58,33.83)
n = c(32,27,38)
s = c(7.08, 8.07, 6.98)
df = data.frame(month = factor(c("Jan", "Mar", "Sep")), x = x, n = n, s = s)
df
# Total sample size
N = sum(n)
# x bar
xbar =mean(x)
# number of categories
cat_num = length(unique(df$month)) # or nrow(df)
# Degree of freedom of numerator (groups)
dfg = cat_num - 1
paste("Degree of freedom of numerator (groups) is",dfg)
# Degree of freedom of denominator (error)
dfe =  N - cat_num
paste("Degree of freedom of denominator (error) is",dfe)
df = data.frame(a = c(387.33, 335.67), b = c(292.67, 455.33), m = c(323.33, 293.67))
df
mean(df$a)
mean(df$b)
mean(df$m)
choose(20,2)
choose(10,2)
45*.05
2.25/45
0.05/3
pt(2.43,129)
1- (1-.05)^choose(10,2)
1- (1-.05)^10
