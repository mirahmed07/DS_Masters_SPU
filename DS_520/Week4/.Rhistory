x <- seq(xmin, ul, by = .1)
xgap <- ifelse(x>xmax,2000, x)
# Choose the mean as 60 and standard deviation as 7.5.
y <- dnorm(x, mean, sd)
par(bty="n") # deleting the box
gap.plot(xgap,y, gap=c(200,1970), gap.axis="x", pch=16,
col="blue", ylim=range(y),
xtics=c(seq(-40, 200, by = 10),seq(1970, 2010, by = 10)),
xticlab=c(seq(-40, 200, by = 10),seq(1970, 2010, by = 10)), xlab = 'mg/d',
ylab ='', main="Distribution of Vitamin C Consumption for Female")
abline(v=mean, col="red")    #add new mean line
abline(v=60, col="purple")    # add old mean line
abline(v=75, col="violet")    # add RDA line
abline(v=seq(200,1970,100), col="white")  # hiding vertical lines
axis.break(1,200,style="slash")               # plotting slashes for breakpoints
legend(140, .01, legend=c("New mean", "Old mean", "RDA"),
col=c("red", "purple", "violet"), lty=1:1, cex=0.8)
# percent of RDA
pz5 = 0.05
# find p-value for two-tailed test
z5= round(qnorm(pz5),2)
print(paste("z score for 5th percentile is", z5))
# percent of RDA
pz50 = 0.50
# RDA
A50 = 114
# find p-value for two-tailed test
z50= round(qnorm(pz50, lower.tail = TRUE),2)
print(paste("z score for 50th percentile is", z50))
# percent of RDA
pz95 = 0.95
# find p-value for two-tailed test
z95= round(qnorm(pz95, lower.tail = TRUE),2)
print(paste("z score for 95th percentile is", z95))
mean = A50
print(paste("The value of mean is",mean))
A95 = 217
sd = (A95-mean)/z95
print(paste("The value of standard deviation is",sd))
ul = 2000
xmin = mean-sd*3
xmax = mean+sd*3
# Create a sequence of numbers between xmin and 2000 incrementing by 0.1
x <- seq(xmin, ul, by = .1)
xgap <- ifelse(x>xmax,2000, x)
# Choose the mean as 60 and standard deviation as 7.5.
y <- dnorm(x, mean, sd)
par(bty="n") # deleting the box
gap.plot(xgap,y, gap=c(330,1970), gap.axis="x", pch=16,
col="blue", ylim=range(y),
xtics=c(seq(-80, 330, by = 10),seq(1970, 2010, by = 10)),
xticlab=c(seq(-80, 330, by = 10),seq(1970, 2010, by = 10)), xlab = 'mg/d',
ylab ='', main="Distribution of Vitamin C Consumption for Male")
abline(v=mean, col="red")    #add new mean line
abline(v=75, col="purple")    # add old mean line
abline(v=90, col="violet")    # add RDA line
abline(v=seq(330,1970,100), col="white")  # hiding vertical lines
axis.break(1,330,style="slash")               # plotting slashes for breakpoints
legend(240, .005, legend=c("New mean", "Old mean", "RDA"),
col=c("red", "purple", "violet"), lty=1:1, cex=0.8)
mean = 100
sd = 20
x = 75
z = (x-mean)/sd
z
pz = pnorm(z, lower.tail = TRUE)
print(paste("Percent value is", round(pz*100,2),"%"))
# for third graders
mean = 70
sd = 10
x = 75
z = (x-mean)/sd
z
pz = pnorm(z, lower.tail = TRUE)
print(paste("Percent value of third graders is", round(pz*100,2),"%"))
# for sixth graders
mean = 80
sd = 11
x = 75
z = (x-mean)/sd
z
pz = pnorm(z, lower.tail = TRUE)
print(paste("Percent value of sixth graders is", round(pz*100,2),"%"))
unlink('C:/Users/mosab/DS_Masters/DS_520/Week1/Solution_week1_Mir_cache', recursive = TRUE)
# percent of RDA
pz5 = 0.05
# find p-value for two-tailed test
z5= round(qnorm(pz5),2)
print(paste("z score for 5th percentile is", z5))
# percent of RDA
pz50 = 0.50
# RDA
A50 = 114
# find p-value for two-tailed test
z50= round(qnorm(pz50, lower.tail = TRUE),2)
print(paste("z score for 50th percentile is", z50))
# percent of RDA
pz95 = 0.95
# find p-value for two-tailed test
z95= round(qnorm(pz95, lower.tail = TRUE),2)
print(paste("z score for 95th percentile is", z95))
mean = A50
print(paste("The value of mean is",mean))
A95 = 217
sd = (A95-mean)/z95
print(paste("The value of standard deviation is",sd))
unlink('C:/Users/mosab/DS_Masters/DS_520/Week1/Solution_week1_Mir_cache', recursive = TRUE)
unlink('C:/Users/mosab/DS_Masters/DS_520/Week1/Solution_week1_Mir_cache', recursive = TRUE)
floor(runif(10, min=10, max=40))
data
data = c(floor(runif(10, min=10, max=40)))
data
stem(data)
data = c(floor(runif(10, min=10, max=40)))
data
stem(data)
data = c(floor(runif(15, min=10, max=40)))
data
stem(data)
data2 = c(10, 11, 11, 12, 12, 14, 15, 18, 19, 20, 22, 24, 39, 40, 41, 44, 46, 50, 52, 52, 53, 55, 70)
stem(data2)
data2 = c(8, 10, 11, 11, 12, 12, 14, 15, 18, 19, 20, 22, 24, 39, 40, 41, 44, 46, 50, 52, 52, 53, 55, 70)
stem(data2)
data3 = c(sample(1:100, 15, replace=TRUE))
data3
stem(data3)
data2 = c(10, 11, 11, 12, 12, 14, 15, 18, 19, 20, 22, 24, 39, 40, 41, 44, 46, 50, 52, 52, 53, 55, 70)
stem(data2)
stem(data3, scale =2)
stem(data3)
stem(data3, scale =1)
stem(data3, scale =3)
knitr::opts_chunk$set(echo = TRUE)
##library(tidyverse)
library(readxl)
file_name = "ex02-152meis.xls"
data = read_xls(file_name)
data
summary(data)
fit<- lm(data$DwellPermit ~ data$Sales)
summary(fit)
# Scatterplot of DwellPermit & Sales
plot(data$DwellPermit, data$Sales, main="Scatterplot of DwellPermit & Sales",
xlab="DwellPermit", ylab="Sales", pch=19)
# Scatterplot of DwellPermit & Sales
plot(data$DwellPermit, data$Sales, main="Scatterplot of DwellPermit & Sales with least-squared regression line",
xlab="DwellPermit", ylab="Sales", pch=19)
# Add fit lines
abline(lm(DwellPermit~Sales, data = data), col="red") # regression line (y~x)
#load necessary libraries
library(ggplot2)
library(ggpubr)
gc()
gc()
knitr::opts_chunk$set(echo = TRUE)
##library(tidyverse)
library(readxl)
file_name = "ex02-152meis.xls"
data = read_xls(file_name)
data
summary(data)
fit<- lm(data$DwellPermit ~ data$Sales)
summary(fit)
# Scatterplot of DwellPermit & Sales
plot(data$DwellPermit, data$Sales, main="Scatterplot of DwellPermit & Sales",
xlab="DwellPermit", ylab="Sales", pch=19)
# Scatterplot of DwellPermit & Sales
plot(data$DwellPermit, data$Sales, main="Scatterplot of DwellPermit & Sales with least-squared regression line",
xlab="DwellPermit", ylab="Sales", pch=19)
# Add fit lines
abline(lm(DwellPermit~Sales, data = data), col="red") # regression line (y~x)
#load necessary libraries
library(ggplot2)
library(ggpubr)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=DwellPermit, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=30, label.y=310) +
stat_cor(aes(label=..rr.label..), label.x=30, label.y=290)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=DwellPermit, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=30, label.y=160) +
stat_cor(aes(label=..rr.label..), label.x=30, label.y=140)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=DwellPermit, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=30, label.y=170) +
stat_cor(aes(label=..rr.label..), label.x=30, label.y=160)
install.packages("rmarkdown")
fit<- lm(data$Sales~ data$DwellPermit)
summary(fit)
# Scatterplot of DwellPermit & Sales
plot(data$DwellPermit, data$Sales, main="Scatterplot of DwellPermit & Sales with least-squared regression line",
xlab="DwellPermit", ylab="Sales", pch=19)
# Add fit lines
abline(lm(Sales~DwellPermit, data = data), col="red") # regression line (y~x)
lm(data$Sales~ data$DwellPermit)
lm(data$Sales~ data$DwellPermit)[0]
lm(data$Sales~ data$DwellPermit)[1]
lm(data$Sales~ data$DwellPermit)[1][0]
lm(data$Sales~ data$DwellPermit)[1][1]
fit$coefficients
fit$coefficients[0]
fit$coefficients[1]
fit$coefficients[2]
b = fit$coefficients[1]
b
b = fit$coefficients[1]
a = fit$coefficients[2]
x = 160
sales = a*x + b
sales
x = 160
sales = a*x + b
a
a
a[0]
a[1]
a[1][1]
a[1][0]
fit$coefficients[-1]
fit$coefficients[-2]
fit$coefficients[-2][1]
fit$coefficients[1]
fit$coefficients[1][3]
fit$coefficients[1][2]
fit$coefficients[1][1]
fit$coefficients[1][-1]
fit$coefficients[1][0]
unname(fit$coefficients[1])
b = unname(fit$coefficients[1])
a = unname(fit$coefficients[2])
x = 160
sales = a*x + b
sales
x = 160
sales = a*x + b
print(paste("Predicted value of sales for a country that has an index of 160 for dwelling permits is", sales))
# Scatterplot of DwellPermit & Sales
plot(data$DwellPermit, data$Sales, main="Scatterplot of DwellPermit & Sales",
xlab="DwellPermit", ylab="Sales", pch=19)
# Scatterplot of DwellPermit & Sales
plot(data$DwellPermit, data$Sales, main="Scatterplot of DwellPermit & Sales with least-squared regression line",
xlab="DwellPermit", ylab="Sales", pch=19)
# Add fit lines
abline(lm(Sales~DwellPermit, data = data), col="red") # regression line (y~x)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=DwellPermit, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=30, label.y=170) +
stat_cor(aes(label=..rr.label..), label.x=30, label.y=160)
#List of residuals
resid(fit)
#List of residual for Netherlands (15th on the list)
resid(fit) [15]
#List of residual for Netherlands (15th on the list)
resid(fit)
which(data$Country == "Nethrlands")
which(data$Country == "Netherlands")
which(data$Country == "Netherlands" & data$DwellPermit==160)
id = which(data$Country == "Netherlands" & data$DwellPermit==160)
#List of residual for Netherlands (15th on the list)
resid(fit)[id]
#List of residual for Netherlands (15th on the list)
print(paste("Residual for Netherlands is",resid(fit)[id]))
data$DwellPermit- data$DwellPermit.mean()
data$DwellPermit- mean(data$DwellPermit)
data$xbar_diff = data$DwellPermit- mean(data$DwellPermit)
data$xbar_diff = data$DwellPermit- mean(data$DwellPermit)
data$ybar_diff = data$Sales- mean(data$Sales)
data$xbar_diffs = (data$DwellPermit- mean(data$DwellPermit))^2
data$ybar_diffs = (data$Sales- mean(data$Sales))^2
data
(sum(data$xbar_diff)*sum(data$ybar_diff))/(sum(data$xbar_diffs)*sum(data$ybar_diffs))
(sum(data$xbar_diff)*sum(data$ybar_diff))/sqrt((sum(data$xbar_diffs)*sum(data$ybar_diffs)))
data$xbar_diff = data$DwellPermit- mean(data$DwellPermit)
data$ybar_diff = data$Sales- mean(data$Sales)
data$xbar_diffs = (data$DwellPermit- mean(data$DwellPermit))^2
data$ybar_diffs = (data$Sales- mean(data$Sales))^2
data$xy = data$xbar_diff * data$ybar_diff
data$xy2 = data$xbar_diffs * data$ybar_diffs
data
sum(xy)/sqrt(sum(xy2))
sum(data$xy)/sqrt(sum(data$xy2))
sum(data$xy)
sum(data$xy2)
rsq <- function (x, y) cor(data$DwellPermit, data$Sales) ^ 2
rsq
rsq <-  cor(data$DwellPermit, data$Sales) ^ 2
rsq
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=DwellPermit, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=30, label.y=170) +
stat_cor(aes(label=..rr.label...), label.x=30, label.y=160)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=DwellPermit, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=30, label.y=170) +
stat_cor(aes(label=..rr.label.), label.x=30, label.y=160)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=DwellPermit, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=30, label.y=170) +
stat_cor(aes(label=.rr.label..), label.x=30, label.y=160)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=DwellPermit, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=30, label.y=170) +
stat_cor(aes(label=..rr.label..), label.x=30, label.y=160)
file_name = "ex02-152meis.xls"
data = read_xls(file_name)
data$xbar_diff = data$DwellPermit- mean(data$DwellPermit)
data$ybar_diff = data$Sales- mean(data$Sales)
data$xbar_diffs = (data$DwellPermit- mean(data$DwellPermit))^2
data$ybar_diffs = (data$Sales- mean(data$Sales))^2
data$xy = data$xbar_diff * data$ybar_diff
data$xy2 = data$xbar_diffs * data$ybar_diffs
data
sum(data$ybar_diffs)/sqrt(sum(data$))
sum(data$ybar_diffs)
sum(data$ybar_diffs) * sum(data$xbar_diffs)
(sum(data$xy))/sqrt(sum(data$ybar_diffs) * sum(data$xbar_diffs))
(sum(data$xy))/sqrt(sum(data$ybar_diffs) * sum(data$xbar_diffs))^2
r = (sum(data$xy))/sqrt(sum(data$ybar_diffs) * sum(data$xbar_diffs))
r^2
r = (sum(data$xy))/sqrt(sum(data$ybar_diffs) * sum(data$xbar_diffs))
r^2
sum(data$xy2)
file_name = "ex02-152meis.xls"
data = read_xls(file_name)
data$xbar_diff = data$DwellPermit- mean(data$DwellPermit)
data$ybar_diff = data$Sales- mean(data$Sales)
data$xbar_diffs = (data$DwellPermit- mean(data$DwellPermit))^2
data$ybar_diffs = (data$Sales- mean(data$Sales))^2
data$xy = data$xbar_diff * data$ybar_diff
data
data = data[c(1:4)]
data
data$xbar_diff = data$DwellPermit- mean(data$DwellPermit)
data$ybar_diff = data$Sales- mean(data$Sales)
data$xbar_diffs = (data$DwellPermit- mean(data$DwellPermit))^2
data$ybar_diffs = (data$Sales- mean(data$Sales))^2
data$xy = data$xbar_diff * data$ybar_diff
data
file_name = "ex02-152meis.xls"
data = read_xls(file_name)
data
summary(data)
fit<- lm(data$Production~ data$DwellPermit)
summary(fit)
b = unname(fit$coefficients[1])
a = unname(fit$coefficients[2])
# Scatterplot of DwellPermit & Sales
plot(data$DwellPermit, data$Production, main="Scatterplot of DwellPermit & Production",
xlab="DwellPermit", ylab="Production", pch=19)
# Scatterplot of DwellPermit & Production
plot(data$DwellPermit, data$Production, main="Scatterplot of DwellPermit & Production with least-squared regression line",
xlab="DwellPermit", ylab="Production", pch=19)
# Add fit lines
abline(lm(Production~DwellPermit, data = data), col="red") # regression line (y~x)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=DwellPermit, y=Production)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=30, label.y=170) +
stat_cor(aes(label=..rr.label..), label.x=30, label.y=160)
x = 160
sales = a*x + b
print(paste("Predicted value of sales for a country that has an index of 160 for dwelling permits is", sales))
x = 160
sales = a*x + b
print(paste("Predicted value of Production for a country that has an index of 160 for dwelling permits is", sales))
id = which(data$Country == "Netherlands" & data$DwellPermit==160)
#List of residual for Netherlands (15th on the list)
print(paste("Residual for Netherlands is",resid(fit)[id]))
rsq <-  cor(data$DwellPermit, data$Production) ^ 2
rsq
cor(data$DwellPermit, data$Production)
cor(data$DwellPermit, data$Sales)
file_name = "ex02-152meis.xls"
data = read_xls(file_name)
data
summary(data)
fit<- lm(data$Production~ data$Sales)
summary(fit)
fit<- lm(data$Sales~ data$Production)
summary(fit)
b = unname(fit$coefficients[1])
a = unname(fit$coefficients[2])
# Scatterplot of Sales & Production
plot(data$Production, data$Sales, main="Scatterplot of Sales & Production",
xlab="Production", ylab="Sales", pch=19)
# Scatterplot of DwellPermit & Production
plot(data$Production, data$sales, main="Scatterplot of sales & Production with least-squared regression line",
xlab="Production", ylab="sales", pch=19)
# Add fit lines
abline(lm(sales~Production, data = data), col="red") # regression line (y~x)
# Scatterplot of DwellPermit & Production
plot(data$Production, data$sales, main="Scatterplot of sales & Production with least-squared regression line",
xlab="Production", ylab="sales", pch=19)
# Add fit lines
abline(lm(Sales~Production, data = data), col="red") # regression line (y~x)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=Production, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=30, label.y=170) +
stat_cor(aes(label=..rr.label..), label.x=30, label.y=160)
# Scatterplot of DwellPermit & Production
plot(data$Production, data$sales, main="Scatterplot of sales & Production with least-squared regression line",
xlab="Production", ylab="sales", pch=19)
# Add fit lines
abline(lm(Sales~Production, data = data), col="red") # regression line (y~x)
# Scatterplot of DwellPermit & Production
plot(data$Production, data$sales, main="Scatterplot of sales & Production with least-squared regression line",
xlab="Production", ylab="Sales", pch=19)
# Add fit lines
abline(lm(Sales~Production, data = data), col="red") # regression line (y~x)
# Scatterplot of DwellPermit & Production
plot(data$Production, data$Sales, main="Scatterplot of sales & Production with least-squared regression line",
xlab="Production", ylab="Sales", pch=19)
# Add fit lines
abline(lm(Sales~Production, data = data), col="red") # regression line (y~x)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=Production, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=80, label.y=170) +
stat_cor(aes(label=..rr.label..), label.x=80, label.y=160)
#create plot with regression line, regression equation, and R-squared
ggplot(data=data, aes(x=Production, y=Sales)) +
geom_smooth(method="lm") +
geom_point() +
stat_regline_equation(label.x=90, label.y=170) +
stat_cor(aes(label=..rr.label..), label.x=90, label.y=160)
b = unname(fit$coefficients[1])
a = unname(fit$coefficients[2])
x = 125
sales = a*x + b
print(paste("Predicted value of Production for a country that has an index of 125 for Production is", sales))
id = which(data$Country == "Finland" & data$Production ==125)
#List of residual for Netherlands (15th on the list)
print(paste("Residual for Finland is",resid(fit)[id]))
id
resid(fit)
rsq <-  cor(data$Production, data$Sales) ^ 2
rsq
cor(data$Production, data$Sales)
gc()
gc()
gc()
install.packages(c("cpp11", "data.table", "digest", "hms", "influenceR", "lattice", "lifecycle", "mgcv", "pillar", "readr", "tidyr"))
mean(data)
data = (572, 572, 573, 568, 569, 575, 565, 570)
data = array(572, 572, 573, 568, 569, 575, 565, 570)
data = c(572, 572, 573, 568, 569, 575, 565, 570)
mean(data)
40/160
data = c(121,   173,   157,   165,   170,   161,   142,   171,   184,   100,   145,   196)
median(data)
sort(data, decreasing = FALSE)
sizeof(data)
length(data)
describe(data)
arr = c(121,   173,   157,   165,   170,   161,   142,   171,   184,   100,   145,   196)
length(arr)
summary(arr)
boxplot(arr,
ylab = "weight"
)
boxplot.stats(arr)$out
(142+145)/2
(171+173)/2
172 – 143.5
172–143.5
172-143.5
143.5-1.5*28.5
172 + 1.5*28.5
length(boxplot.stats(arr)$out)
(150-185)/39
round((150-185)/39,2)
(150-185)/39
pnorm((150-185)/39)
pnorm(.8974359 )
pnorm(-.8974359 )
install.packages("webshot")
install.packages("latexpdf")
unlink("C:/Users/mosab/DS_Masters/DS_520/Week4/Assignment_4_Mir_cache", recursive = TRUE)
setwd("C:/Users/mosab/DS_Masters/DS_520/Week4")
# Here
n = 12
x = 9
p = 3/4
ans = (factorial(n)/(factorial(x)*factorial(n-x)))*(p^x)*(1-p)^(n-x)
print(paste("The probability that exactly 6 out of 12 of these plants have red blossoms is",round(ans,4)))
p = 3/4
# Here
n = 12
x = 9
p = 3/4
ans = (factorial(n)/(factorial(x)*factorial(n-x)))*(p^x)*(1-p)^(n-x)
print(paste("The probability that exactly 9 out of 12 of these plants have red blossoms is",round(ans,4)))
